title: "Code behind: uma técnica super interessante de se usar no Flex"
slug: code-behind-uma-tecnica-super-interessante-de-se-usar
author: Vítor Avelino
date: 2009/08/08

A primeira pergunta para quem nucna ouviu falar no termo é a seguinte:

> O que é *Code behind*? É realmente interessante? Para que ele serve?

Code behind é uma técnica que esconde o comportamento (código em ActionScript) de um componente do MXML, ou vice-versa.

Ué, por aí eles não citam esconder o MXML do comportamento, apenas o contrário. É verdade. Em uma das referências que serão passadas só se é comentado utilizar a *ida* da definição dei acima, e não a *volta*. Isso é algo bem questionável, porém ao navegar um pouco encontrei um <a href="http://blog.mariojunior.com/?p=20" target="_blank">post</a> do Mário Júnior que falava sobre a técnica e, ele utilizou no seu exemplo a *volta* da definição.

Para mim, o que o Mário Júnio havia feito não se encaixava no conceito que eu havia lido e visto em outros lugares. E agora? Ao ficar mais um tempo olhando o código do exemplo, percebi que havia sido implementado um *code behind*, mas do MXML em relação ao comportamento. E não o inverso como seria de costume.

Como falei, há duas formas de implementar. Não irei codificar nada porque as referências já são auto-explicativas. Segue abaixo dois diagramas genéricos.

### Primeira implementação ("clássica"):

<img class="alignnone size-full wp-image-177" title="codebehind1" src="http://vitoravelino.net/blog/wp-content/uploads/2009/08/codebehind1.png" alt="codebehind1" width="480" height="74" />

Cria-se uma classe em ActionScript e nela implementa-se todo o comportamento que o componente MXML irá ter. É necessário declarar como atributos das classes todos os elementos que no MXML terão algum tipo de comportamento. O componente MXML irá extender a classe em ActionScript para  "desenhar" a interface.

### Segunda implementação:

<img class="alignnone size-full wp-image-176" title="codebehind2" src="http://vitoravelino.net/blog/wp-content/uploads/2009/08/codebehind2.png" alt="codebehind2" width="480" height="74" />

Cria-se um componente MXML e em seguida implementa uma classe ActionScript que extenderá o MXML. Nela serão codificados os comportamentos de forma transparente.

Perceba que estamos fazendo a mesma coisa de duas formas diferentes, mas na segunda a complexidade é um pouco menor. Isto porque não é necessário sair declarando cada elemento do MXML que irá ter um certo comportamento. O código fica mais limpo e legível.

Particularmente, prefiro a segunda maneira. Seja de uma forma ou de outra, será sim *code behind*. Fica a seu critério que forma você se sente mais a vontade para desenvolver seus componentes. Prefiro "desenhar" e depois jogar comportamentos em cima. ;D

**Referências**

   * <a href="http://learn.adobe.com/wiki/display/Flex/Code+Behind" target="_blank">http://learn.adobe.com/wiki/display/Flex/Code+Behind</a>
   * <a href="http://blog.mariojunior.com/?p=20 " target="_blank">http://blog.mariojunior.com/?p=20 </a>
   * <a href="http://www.mariojunior.com/labs/codeBehind/srcview/index.html" target="_blank">http://www.mariojunior.com/labs/codeBehind/srcview/index.html</a> (exemplo que segue a segunda forma)
