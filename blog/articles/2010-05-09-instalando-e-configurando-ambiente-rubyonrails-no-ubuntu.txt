title: "Instalando e configurando ambiente Ruby on Rails no Ubuntu 10.04"
slug: instalando-e-configurando-ambiente-rubyonrails-no-ubuntu
author: Vítor Avelino
date: 2010/05/09

Semana passada, mais uma vez, tive a curiosidade e **coragem** de preparar o ambiente de desenvolvimento Rails no Ubuntu (no meu caso, o 10.04). Após muita pesquisa, acatei o melhor de cada dica e decidi preparar e compartilhar os passos que tomei para ter um ambiente redondo.

Teremos ao final um ambiente com Ruby 1.9.1 + Rails 2.3.8 + RubyGems 1.3.7 + SQLite3/MySQL/PostgreSQL instalados e pronto para desenvolvimento. Vamos lá então!

**[update 20/05/10 às 10:31]** Até ontem, eu pensei que a instalação do RubyGems instalado via source juntamente com o Ruby instalado via apt-get estava correto. De fato, está. Porém, após muita dor de cabeça percebi que ao instalar o Ruby via apt-get ele não reconhece os PATHS de ambiente utilizados pelo RubyGems. O problema é que diante do Rails, o ambiente parecia estar funcionando corretamente.

Como percebi? Simples, fui instalar a gem do <a href="http://sinatrarb.com/" target="_blank">Sinatra</a> e ela simplesmente não era encontrada. Achei estranho e fui mais além, foi aí que instalei uma lib (libsinatra-ruby1.9.1) e tudo funcionou. Ou seja, quem estava fazendo o papel do RubyGems eram essas libs e não a própria.

Era tão visível isso, mas acabei me dando conta somente agora. Por exemplo, pra usar o sqlite3 precisava instalar além do mesmo, duas libs (libsqlite3-dev libsqlite3-ruby1.9.1), mas em um ambiente redondo isso não seria necessário. Por que? Porque na verdade quem está fazendo o papel da gem não é de fato ela, mas sim essas duas libs que foram instaladas.

**DICA:** Jamais misture uma app instalada via gerenciador de pacotes com algum plugin/feature que é instalado via *source*. A probabilidade de acontecer alguma merda é alta, a não ser que você esteja sabendo bem onde esteja pisando; o que não foi meu caso.

Peço desculpas aos que acreditaram fielmente que isso daqui estava, de fato, 100% correto. Iremos instalar os pré-requisitos via apt-get e o Ruby + RubyGems via source. Sem mais dores de cabeça! ;) **[/update]**

### Primeiro passo

<pre>
    <code>
$ sudo apt-get install build-essential libssl-dev libreadline5-dev zlib1g-dev
    </code>
</pre>
Instalação dos pré-requisitos para o funcionamento correto do Ruby após instalado.

### Segundo passo

<pre>
    <code>
$ cd ~
$ wget ftp://ftp.ruby-lang.org//pub/ruby/ruby-1.9-stable.tar.gz
$ tar -zxvf ruby-1.9-stable.tar.gz
$ cd  ruby-1.9.X-pYYY
$ ./configure
$ make
$ sudo make install
    </code>
</pre>
Instalação do Ruby 1.9.X diretamente do código fonte que será instalado em /usr/local/bin/ruby.

### Terceiro passo

<pre>
    <code>
$ cd ~
$ wget http://rubyforge.org/frs/download.php/70696/rubygems-1.3.7.tgz
$ tar -zxvf rubygems-1.3.7.tgz
$ cd rubygems-1.3.7
$ sudo ruby setup.rb
    </code>
</pre>
Instalação do RubyGems que já ficará configurado de acordo com o Ruby instalado anteriomente.

### Quarto passo

<pre>
    <code>
$ sudo gem install rails
    </code>
</pre>
Instalação da versão estável atual do Rails, a 2.3.8.

### Quinto passo

Neste quarto passo darei três opções para escolha de qual BD utilizar, porém só testei até o momento com SQLite3.

#### SQLite3 (default na instalação do Rails)

<pre>
    <code>
$ sudo apt-get install sqlite3 libsqlite3-dev
$ sudo gem install sqlite3-ruby
    </code>
</pre>
Instalação do SQLite3, as libs necessária para compilação e funcionamento da gem e sua respectiva gem.

#### MySQL

<pre>
    <code>
$ sudo apt-get install mysql-server-5.1 mysql-client-5.1 libmysqlclient-dev
$ sudo gem install mysql
    </code>
</pre>
Instalação do servidor e cliente do MySQL 5.1, as libs necessária para compilação e funcionamento da gem e sua respectiva gem.

**Obs:** Rails assume que o arquivo socket MySQL será encontrado em /tmp/mysqld.sock. No Ubuntu, este não é o caso. Certifique-se de mudar database.yml para refletir o local real do arquivo de socket:

<pre>
    <code>
socket: '/var/run/mysqld/mysqld.sock'
    </code>
</pre>

#### PostgreSQL

<pre>
    <code>
$ sudo apt-get install postgresql-8.4 postgresql-server-dev-8.4
$ sudo gem install pg
    </code>
</pre>
Instalação do PostgreSQL 8.4, as libs necessária para compilação e funcionamento da gem e sua respectiva gem.

**[update]** Para quem tiver interesse em algo mais detalhado do PostgreSQL 8.4 + pgAdmin III, clique [aqui](http://vitoravelino.net/blog/2010/05/14/instalando-e-configurando-postgresql-8-4-pgadmin-iii-no-ubuntu-10-04/). **[/update]**

### Sexto passo (e último, ufa!)

Enfim, agora é hora de criar o projeto e meter a mão na massa.

#### SQLite3 (default)

<pre>
    <code>
$ rails app_rails
    </code>
</pre>

#### MySQL

<pre>
    <code>
$ rails app_rails -d mysql
    </code>
</pre>

#### PostgreSQL

<pre>
    <code>
$ rails app_rails -d postgres
    </code>
</pre>

Espero ter ajudado. Qualquer dúvida ou contribuição será bem vinda. :D

[]'s

Referência: [http://wiki.rubyonrails.org/getting-started/installation/linux](http://wiki.rubyonrails.org/getting-started/installation/linux )
